name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: setup jdk17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLKK_GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: ghcr.io/${{ github.repository }}:latest
          push: true


  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          script: |
            # 1. 새 이미지를 레지스트리에서 pull
            docker pull ghcr.io/${{ github.repository }}:latest

            # 2. 기존 컨테이너 중지 및 삭제
            docker stop green || true  # 기존 컨테이너가 있으면 중지
            docker rm green || true    # 기존 컨테이너가 있으면 삭제

            # 3. 새로운 이미지로 컨테이너 실행
            docker run -d -p 8082:8080 --name green ghcr.io/${{ github.repository }}:latest

      - name: Switch to Green
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY}}
          port: ${{ secrets.PORT}}
          script: |
            #             새 버전의 Docker 이미지를 EC2에서 pull
            docker pull ghcr.io/${{ github.repository }}:latest
            
            # Stop and remove the old container
            docker stop green || true && docker rm green || true
            
            # 새 인스턴스(app_v2) 실행
            docker run -d -p 8082:8080 --name green ghcr.io/${{ github.repository }}:latest
            
            # Update Nginx to point to Green environment
            sudo sed -i 's/blue/green/g' /etc/nginx/sites-available/default
            sudo service nginx reload